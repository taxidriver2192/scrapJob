# Use the official PHP Apache image
FROM php:8.4-apache

# Enable Apache mod_rewrite
RUN a2enmod rewrite

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    zip \
    unzip \
    default-mysql-client \
    wget

# Clear cache
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

# Install PHP extensions
RUN docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd

# Get latest Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Set working directory
WORKDIR /var/www/html

# Copy existing application directory contents
COPY laravel-dashboard /var/www/html

# Copy existing application directory permissions
COPY --chown=www-data:www-data laravel-dashboard /var/www/html

# Change current user to www
USER www-data

# Install dependencies (include dev dependencies for debugbar)
RUN composer install --optimize-autoloader

# Generate application key if .env doesn't exist
RUN php artisan key:generate --ansi || true

# Create storage directories and set proper permissions
RUN mkdir -p storage/logs storage/framework/cache storage/framework/sessions storage/framework/views bootstrap/cache

# Switch back to root to set up Apache and final permissions
USER root

# Configure Apache to point to Laravel's public directory
RUN sed -ri -e 's!/var/www/html!/var/www/html/public!g' /etc/apache2/sites-available/*.conf
RUN sed -ri -e 's!/var/www/!/var/www/html/public!g' /etc/apache2/apache2.conf /etc/apache2/conf-available/*.conf

# Enable Apache error logging
RUN echo "ErrorLog /var/log/apache2/error.log" >> /etc/apache2/apache2.conf
RUN echo "LogLevel warn" >> /etc/apache2/apache2.conf

# Set permissions
RUN chown -R www-data:www-data /var/www/html \
    && chmod -R 755 /var/www/html/storage \
    && chmod -R 755 /var/www/html/bootstrap/cache

# Create .env file with debugging enabled if it doesn't exist
RUN if [ ! -f /var/www/html/.env ]; then \
    cp /var/www/html/.env.example /var/www/html/.env 2>/dev/null || \
    echo "APP_NAME=Laravel\nAPP_ENV=development\nAPP_KEY=\nAPP_DEBUG=true\nAPP_URL=http://localhost:8082\nLOG_CHANNEL=stack\nLOG_LEVEL=debug\nDB_CONNECTION=mysql\nDB_HOST=mysql\nDB_PORT=3306\nDB_DATABASE=linkedin_jobs\nDB_USERNAME=root\nDB_PASSWORD=\nCACHE_STORE=file\nSESSION_DRIVER=file\nQUEUE_CONNECTION=sync" > /var/www/html/.env; \
fi

# Ensure proper settings in .env
RUN sed -i 's/APP_DEBUG=false/APP_DEBUG=true/' /var/www/html/.env || true
RUN sed -i 's/APP_ENV=production/APP_ENV=development/' /var/www/html/.env || true
RUN sed -i 's/CACHE_STORE=database/CACHE_STORE=file/' /var/www/html/.env || true
RUN sed -i 's/SESSION_DRIVER=database/SESSION_DRIVER=file/' /var/www/html/.env || true
RUN sed -i 's/QUEUE_CONNECTION=database/QUEUE_CONNECTION=sync/' /var/www/html/.env || true

# Add missing settings if they don't exist
RUN grep -q "APP_DEBUG=true" /var/www/html/.env || echo "APP_DEBUG=true" >> /var/www/html/.env
RUN grep -q "CACHE_STORE=file" /var/www/html/.env || echo "CACHE_STORE=file" >> /var/www/html/.env
RUN grep -q "SESSION_DRIVER=file" /var/www/html/.env || echo "SESSION_DRIVER=file" >> /var/www/html/.env

# Set proper ownership for .env
RUN chown www-data:www-data /var/www/html/.env

# Switch to www-data user for Laravel commands
USER www-data

# Clear all caches and configure Laravel (handle database connection gracefully)
RUN php artisan config:clear || true
RUN php artisan route:clear || true
RUN php artisan view:clear || true
RUN php artisan cache:clear || true

# Generate application key if not already set
RUN php artisan key:generate --ansi --force

# Switch back to root for final setup
USER root

# Fix permissions for Laravel storage and cache directories
RUN chown -R www-data:www-data /var/www/html/storage /var/www/html/bootstrap/cache \
    && chmod -R 775 /var/www/html/storage \
    && chmod -R 775 /var/www/html/bootstrap/cache \
    && chmod -R 775 /var/www/html/storage/framework \
    && chmod -R 775 /var/www/html/storage/framework/views \
    && chmod -R 775 /var/www/html/storage/framework/cache \
    && chmod -R 775 /var/www/html/storage/framework/sessions \
    && chmod -R 775 /var/www/html/storage/logs

# Create a custom PHP configuration to show errors
RUN echo "display_errors = On" >> /usr/local/etc/php/php.ini && \
    echo "display_startup_errors = On" >> /usr/local/etc/php/php.ini && \
    echo "error_reporting = E_ALL" >> /usr/local/etc/php/php.ini

# Create entrypoint script to handle permissions at runtime
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
# Ensure directories exist\n\
mkdir -p /var/www/html/storage/framework/{cache,sessions,views}\n\
mkdir -p /var/www/html/bootstrap/cache\n\
mkdir -p /var/www/html/storage/logs\n\
\n\
# Nuclear option - make storage world writable\n\
chmod -R 777 /var/www/html/storage\n\
chmod -R 777 /var/www/html/bootstrap/cache\n\
\n\
# Start Apache\n\
exec apache2-foreground' > /entrypoint.sh && \
    chmod +x /entrypoint.sh

# Expose port 80
EXPOSE 80

# Use custom entrypoint
ENTRYPOINT ["/entrypoint.sh"]
